#!/usr/bin/env python3

import sys
import random


def main(h, w, c, n, s):
    file = open("words.txt")
    words = file.readlines()
    if h == 1:
        return ("""usage: xkcdpwgen [-h] [-w WORDS] [-c CAPS] [-n NUMBERS] [-s SYMBOLS]
                
Generate a secure, memorable password using the XKCD method
                
optional arguments:
    -h, --help            show this help message and exit
    -w WORDS, --words WORDS
                          include WORDS words in the password (default=4)
    -c CAPS, --caps CAPS  capitalize the first letter of CAPS random words
                          (default=0)
    -n NUMBERS, --numbers NUMBERS
                          insert NUMBERS random numbers in the password
                          (default=0)
    -s SYMBOLS, --symbols SYMBOLS
                          insert SYMBOLS random symbols in the password
                          (default=0)""")
    password_elems = []
    if w is not None:
        for i in range(w):
                word = words[random.randint(0, len(words))]
                password_elems.append(word[0:len(word)-1])
    if c is not None and w >= c:
        for i in range(c):
            j = random.randint(0, len(password_elems)-1)
            password_elems[j] = password_elems[j].title()
    else:
        raise Exception("Not enough words to capitalize")

    symbols = "(~!@#$%^&*.:;)"
    if c is not None:
        for i in range(s):
            j = random.randint(0, len(symbols)-1)
            password_elems.append(symbols[j])

    if n is not None:
        for i in range(n):
            j = random.randint(0, 9)
            password_elems.append(str(j))

    password = ""
    for i in range(len(password_elems)):
        print(password_elems)
        j = random.randint(0, len(password_elems)-1)
        char = password_elems.pop(j)
        password += char

    return password


if __name__ == "__main__":
    h, w, c, n, s = None, None, None, None, None
    if len(sys.argv) == 1:
        print(main(0, 4, c, n, s))
    else:
        for i in range(len(sys.argv)):
            if sys.argv[i] == "-h":
                h = 1
            elif sys.argv[i] == "-w":
                w = int(sys.argv[i + 1])
            elif sys.argv[i] == "-c":
                c = int(sys.argv[i + 1])
            elif sys.argv[i] == "-n":
                n = int(sys.argv[i + 1])
            elif sys.argv[i] == "-s":
                s = int(sys.argv[i + 1])
            else:
                raise Exception("Argument not supported, type -h for help")
        print(main(h, w, c, n, s))
